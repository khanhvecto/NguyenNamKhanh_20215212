11)
	 In detail, when i call the function toString(), the 3 type of media print the different format depends on the toString() method of each class. Althought i dont have toString() method at Media class. This is because each object is initialized by a different class, the method simply call from that class, not from the class it is inherited from.

12)
	- The object class we want to sort should implements the Comparable interface. In this case: Media.
	- We override the compareTo method to reflect the order we want for sorting. For example:
		@Override
		public int compareTo(Media media) {
			if(this.cost > media.getCost()) return 1;
			else if(this.cost < media.getCost()) return -1;
			else return (this.title.compareTo(media.getTitle()));
		}
	- We can't have different ordering rules for Comparable interface. Because the rule is present in compareTo() method and each type of object can only has 1 method compareTo(). So we have the object with unique soting rule.
	- I can override the compareTo() method in the DigitalVideoDisc class to modify the new ordering rule for DVD. But that comes along the problem when sort with other Media types(Book, Cd) because sort multiple subclass require the unique ordering rule.